type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type MediaProperty {
  size: Int # file size
  height: Int # media (image/video) height
  width: Int # media (image/video) width
  duration: Int # media (audio/video) seconds
}

type Media {
  media: S3Object # s3 link for image, audio or video
  property: MediaProperty
}

# Requires the following resolver changes: createUser
# ## Automatically set the owner
# $util.qr($context.args.input.put("owner", $context.identity.username))
type User
  @model #(subscriptions: null)
  @key(fields: ["owner"])
  @auth(
    rules: [
      # read only access to app users, and mutations for owners
      { allow: owner, operations: [create, update, delete] }
      { allow: private, provider: iam, operations: [read, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
      # {allow: owner, ownerField: "owner", operations: [create, update, delete, read]},
      # {allow: owner, ownerField: "owner", identityClaim: "cognito:username"}
    ]
  ) {
  owner: String! # cognitor:username
  displayName: String! # @auth(rules: [{ allow: private, provider: iam, operations: [read] }])
  avatar: Media # @auth(rules: [{ allow: private, provider: iam, operations: [read] }])
  #todos: [Todo] @connection(keyName: "ByOwner", fields: ["owner"])
}

enum Privacy {
  draft     # only owner accessible
  private   # friend accessible
  pending   # pending public approval by Admins
  public    # public
}

# Requires the following resolver changes: createTodo
# ## Automatically set the owner
# $util.qr($context.args.input.put("owner", $context.identity.username))
type Todo
  @model
  @key(
    name: "ByPrivacy"
    fields: ["privacy", "createdAt"]
    queryField: "todosByPrivacy"
  )
  @key(
    name: "ByOwner"
    fields: ["owner", "createdAt"]
    queryField: "todosByOwner"
  )
  @auth(
    rules: [
      # read only access to app users, and mutations for owners
      { allow: owner, operations: [create, update, delete] }
      { allow: private, provider: iam, operations: [read, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
      # All unauthenticatd read access.
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  privacy: Privacy!
  createdAt: AWSDateTime!
  owner: String! # @auth(rules: [{ allow: owner, ownerField: "owner", identityClaim: "cognito:username" }])
  creator: User! @connection(fields: ["owner"])
  name: String!
  description: String
}
