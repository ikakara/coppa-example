type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type MediaProperty {
  size: Int # file size
  height: Int # media (image/video) height
  width: Int # media (image/video) width
  duration: Int # media (audio/video) seconds
}

type Media {
  media: S3Object # s3 link for image, audio or video
  property: MediaProperty
}

# Requires the following resolver changes: createUser
# ## Automatically set the owner
# $util.qr($context.args.input.put("owner", $context.identity.username))
type User
  @model #(subscriptions: null)
  @key(fields: ["owner"])
  @auth(
    rules: [
      # read only access to app users, and mutations for owners
      { allow: owner, operations: [create, update, delete] }
      { allow: private, provider: iam, operations: [read, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
      # {allow: owner, ownerField: "owner", operations: [create, update, delete, read]},
      # {allow: owner, ownerField: "owner", identityClaim: "cognito:username"}
    ]
  ) {
  owner: String! # cognitor:username
  displayName: String! # @auth(rules: [{ allow: private, provider: iam, operations: [read] }])
  avatar: Media # @auth(rules: [{ allow: private, provider: iam, operations: [read] }])
  todos: [Todo] @connection(keyName: "ByOwner", fields: ["owner"])
}

enum Visibility {
  HIDDEN # only owner accessible
  DRAFT # owner mutable, editors readable
  PRIVATE # editor accessible
  PENDING # curators and admins
  PUBLIC # public accessible
}

# Requires the following resolver changes: createTodo
# ## Automatically set the owner
# $util.qr($context.args.input.put("owner", $context.identity.username))
type Todo
  @model
  @key(name: "ByOwner", fields: ["owner", "createdAt"])
  @key(
    name: "ByVisibility"
    fields: ["visibility", "createdAt"]
    queryField: "todosByVisibility"
  )
  @auth(
    rules: [
      # read only access to app users, and mutations for owners
      { allow: owner, operations: [create, update, delete] }
      { allow: private, provider: iam, operations: [read, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
      # All unauthenticatd read access.
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  owner: String!
  visibility: Visibility!
  createdAt: AWSDateTime!
  name: String!
  description: String
  creator: User @connection(fields: ["owner"])
  editors: [String]
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

input MediaPropertyInput {
  size: Int
  height: Int
  width: Int
  duration: Int
}

input MediaInput {
  media: S3ObjectInput
  property: MediaPropertyInput
}

# This is needed to override the auto-generated CreateUserInput (owner, displayName, avatar)
input CreateUserInput {
  displayName: String!
  avatar: MediaInput
}

# This is needed to override the auto-generated CreateTodoInput ()
input CreateTodoInput {
  visibility: Visibility!
  name: String!
  description: String
}
